{"version":3,"sources":["assets/images/CVV.png","components/Payment/Payment.jsx","components/Terms/Terms.jsx","components/SubmitBtn/SubmitBtn.jsx","App.js","index.js"],"names":["module","exports","Payment","cards","cardsValue","setCardsValue","useState","activeCard","setActiveCard","toolTipActive","setToolTipActive","onChangeValue","event","value","target","name","validateValues","replace","length","validYear","validName","validCvv","openToolTip","closeToolTip","className","map","link","key","id","onClick","number","month","year","cvv","validNumber","validMonth","card","htmlFor","type","onChange","cardNumber","match","join","validateCardNumbersValue","maxLength","onMouseOver","onMouseLeave","src","imgCVV","alt","Terms","termsChecked","setTermsChecked","activePopup","setActivePopup","popupWrap","useRef","popupBtn","checked","ref","current","SubmitBtn","onSubmit","App","initialState","successSubmit","setSuccessSubmit","errorSubmit","setErrorSubmit","checkValidate","setTimeout","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b5dbd64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CVV.0fcb68ef.png\";","import React, { useState } from 'react'\r\n\r\nimport './styles.scss'\r\nimport imgCVV from './../../assets/images/CVV.png'\r\n\r\nconst Payment = ({cards, cardsValue, setCardsValue }) => {\r\n\r\n    const [activeCard, setActiveCard] = useState(1)\r\n    const [toolTipActive, setToolTipActive] = useState(false)\r\n\r\n    const onClickLinkActive = (id) => {\r\n        setActiveCard(id)\r\n        setCardsValue({\r\n            number: '',\r\n            month: '',\r\n            year: '',\r\n            name: '',\r\n            cvv: '',\r\n            validNumber: false,\r\n            validMonth: false,\r\n            validYear: false,\r\n            validName: false,\r\n            validCvv: false,\r\n        })\r\n    }\r\n\r\n    const onChangeValue = (event) => {\r\n        const value = event.target.value\r\n        const name = event.target.name\r\n        setCardsValue(() => validateValues(value, name))\r\n    }\r\n\r\n    const validateValues = (value, name) => {\r\n        switch(name) {\r\n            case 'month':\r\n                return {\r\n                    ...cardsValue,\r\n                    [name]: value.replace(/[^\\d]/g,''),\r\n                    validMonth: value.length === 2,\r\n                }\r\n            case 'year':\r\n                return {\r\n                    ...cardsValue,\r\n                    validYear: value.length === 2,\r\n                    [name]: value.replace(/[^\\d]/g,''),\r\n                }\r\n            case 'name':\r\n                return {\r\n                    ...cardsValue,\r\n                    validName: value.length > 3 && value.length <= 40,\r\n                    [name]: value.replace(/[^a-z\\s]/gi, ''),\r\n                }\r\n            case 'cvv':\r\n                return {\r\n                    ...cardsValue,\r\n                    validCvv: value.length === 3,\r\n                    [name]: value.replace(/[^\\d]/g,''),\r\n                }\r\n            default: \r\n                return cardsValue\r\n        }\r\n    }\r\n\r\n    const validateCardNumbersValue = (event) => {\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n        let cardNumber = value.replace(/\\D/g, '')\r\n        cardNumber = cardNumber !== '' ? cardNumber.match(/.{1,4}/g).join(' ') : ''\r\n        setCardsValue({\r\n            ...cardsValue,\r\n            [name] : cardNumber,\r\n            validNumber: value.length === 19,\r\n        })\r\n    }\r\n\r\n    const openToolTip = () => {\r\n        setToolTipActive(true)\r\n    }\r\n    const closeToolTip = () => {\r\n        setToolTipActive(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"payment\">\r\n            <div className=\"payment__nav\">\r\n                {cards.map(link => (\r\n                    <span\r\n                        key={link.id}\r\n                        onClick={() => onClickLinkActive(link.id)}\r\n                        className={activeCard === link.id ? 'payment__nav-link active' : 'payment__nav-link'}\r\n                    >\r\n                        {link.name}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"payment-card_wrap\">\r\n                {cards.map(card => (\r\n                    <div\r\n                        key={card.id}\r\n                        className={card.id === activeCard ? 'payment-card active' : 'payment-card'}\r\n                    >\r\n                        <div className=\"payment-card__left\">\r\n                            <div className=\"payment-card__input_wrap\">\r\n                                <label htmlFor=\"\" className=\"payment-card__label\">Card number</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className={cardsValue.validNumber ? 'payment-card__input' : 'payment-card__input error'}\r\n                                    name=\"number\"\r\n                                    value={cardsValue.number}\r\n                                    onChange={(event) => validateCardNumbersValue(event)}\r\n                                    maxLength=\"19\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"payment-card__input_wrap\">\r\n                                <label htmlFor=\"\" className=\"payment-card__label\">Valid thru (mm/yy)</label>\r\n                                <div className=\"payment-card__input-date_wrap\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={cardsValue.validMonth ? 'payment-card__input' : 'payment-card__input error'}\r\n                                        name=\"month\" \r\n                                        value={cardsValue.month}   \r\n                                        onChange={(event) => onChangeValue(event)} \r\n                                        maxLength=\"2\"\r\n                                    />\r\n                                    <span>/</span>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={cardsValue.validYear ? 'payment-card__input' : 'payment-card__input error'}\r\n                                        name=\"year\" \r\n                                        value={cardsValue.year}   \r\n                                        onChange={(event) => onChangeValue(event)} \r\n                                        maxLength=\"2\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"payment-card__input_wrap\"> \r\n                                <label htmlFor=\"\" className=\"payment-card__label\">Cardholder's name</label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className={cardsValue.validName ? 'payment-card__input' : 'payment-card__input error'}\r\n                                    name=\"name\"\r\n                                    value={cardsValue.name}   \r\n                                    onChange={(event) => onChangeValue(event)} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"payment-card__right\">\r\n                            <div className=\"payment-card__input_wrap\">\r\n                                <label htmlFor=\"\" className=\"payment-card__label\">CVV/CVC</label>\r\n                                <div className=\"payment-card__cvv-wrap\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={cardsValue.validCvv ? 'payment-card__input' : 'payment-card__input error'}\r\n                                        name=\"cvv\"\r\n                                        value={cardsValue.cvv}   \r\n                                        onChange={(event) => onChangeValue(event)} \r\n                                        maxLength=\"3\"\r\n                                    />\r\n                                    <span \r\n                                        className=\"payment-card__cvv-question\"\r\n                                        onMouseOver={openToolTip}\r\n                                        onMouseLeave={closeToolTip}\r\n                                    >\r\n                                        ?\r\n                                    </span>\r\n                                    <div className=\"tooltip\" className={toolTipActive ? 'tooltip active': 'tooltip'}>\r\n                                        <div className=\"tooltip__inner\">\r\n                                            <p>CVV-код находится на тыльной стороне карты и включает в себя три цифры</p>\r\n                                            <img src={imgCVV} alt=\"cvv\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n","import React, { useState, useRef } from 'react'\r\nimport './styles.scss'\r\n\r\n\r\nconst Terms = ({ termsChecked, setTermsChecked }) => {\r\n    const [activePopup, setActivePopup] = useState(false)\r\n    const popupWrap = useRef()\r\n    const popupBtn = useRef()\r\n\r\n    const onClickOpenPopup = () => {\r\n        setActivePopup(true)\r\n    }\r\n\r\n    const onClickClosePopup = (event) => {\r\n        if(event.target === popupWrap.current || event.target === popupBtn.current) {\r\n            setActivePopup(false)\r\n        }\r\n    }\r\n\r\n    const onChangeTermsChecked = () => {\r\n        setTermsChecked(!termsChecked)\r\n    }\r\n\r\n    return (\r\n        <div className=\"app__item terms\">\r\n            <input\r\n                id=\"terms\"\r\n                type=\"checkbox\"\r\n                checked={termsChecked}\r\n                onChange={onChangeTermsChecked} />\r\n            <div className=\"terms__text\">\r\n                <label htmlFor=\"terms\" className=\"terms__text-label\">\r\n                    I accept the\r\n                </label>\r\n                <span\r\n                    className=\"terms__text-link\"\r\n                    onClick={onClickOpenPopup}\r\n                >\r\n                    Terms and Conditions\r\n                </span>\r\n                <div \r\n                    className={activePopup? 'terms__popup_wrap active' : 'terms__popup_wrap'} \r\n                    ref={popupWrap}\r\n                    onClick={onClickClosePopup}\r\n                >\r\n                    <div className=\"terms__popup\">\r\n                        <h6>Terms and Conditions</h6>\r\n                        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ea quis dolore eos ipsa architecto porro necessitatibus non, minima laboriosam esse distinctio earum ducimus repudiandae dolorem perferendis? Nemo, voluptatum et! Natus?</p>\r\n                        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ea quis dolore eos ipsa architecto porro necessitatibus non, minima laboriosam esse distinctio earum ducimus repudiandae dolorem perferendis? Nemo, voluptatum et! Natus?</p>\r\n                        <span ref={popupBtn} className=\"terms__popup-btn\">&times;</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Terms\r\n","import React from 'react'\r\nimport './styles.scss'\r\n\r\n\r\nconst SubmitBtn = ({onSubmit}) => {\r\n    return (\r\n        <button onClick={onSubmit} className=\"submit-btn\">Place order ($624.99)</button>\r\n    )\r\n}\r\n\r\nexport default SubmitBtn\r\n","import React, {useState} from 'react';\nimport { Payment, Terms, SubmitBtn } from './components'\n\nfunction App() {\n\n  const initialState = {\n    cards: [\n      { id: 1, name: 'Credit card' },\n      { id: 2, name: 'Gift card' },\n      { id: 3, name: 'PayPal' },\n    ],\n    cardsValue: {\n      number: '',\n      month: '',\n      year: '',\n      name: '',\n      cvv: '',\n      validNumber: false,\n      validMonth: false,\n      validYear: false,\n      validName: false,\n      validCvv: false,\n    },\n    termsChecked: false,\n    successSubmit: false,\n    errorSubmit: false \n  }\n\n  const [cards] = useState(initialState.cards)\n  const [cardsValue, setCardsValue] = useState(initialState.cardsValue)\n  const [termsChecked, setTermsChecked] = useState(initialState.termsChecked)\n  const [successSubmit, setSuccessSubmit] = useState(initialState.successSubmit)\n  const [errorSubmit, setErrorSubmit] = useState(initialState.errorSubmit)\n\n  const onSubmit = () => {\n    checkValidate()\n  }\n  \n  const checkValidate = () => {\n    if(cardsValue.validNumber && cardsValue.validMonth && cardsValue.validYear\n        && cardsValue.validName && cardsValue.validCvv && termsChecked) {\n          setSuccessSubmit(true)\n          setErrorSubmit(false)\n          setTimeout(() => {\n            setSuccessSubmit(false)\n          }, 2000)\n\n      } else {\n        setErrorSubmit(true)\n        setSuccessSubmit(false)\n        setTimeout(() => {\n          setErrorSubmit(false)\n        }, 2000)\n      }\n  }\n\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Checkout</h1>\n\n      <div className=\"app__item\">\n        <h2 className=\"app__item-title\">Products</h2>\n        <div className=\"inner-list\">\n          <div className=\"inner-list__item\">\n            <a href=\"\">Apple MacBook Pro 16\" 8 Core i9</a>\n            <span>$499.00</span>\n          </div>\n          <div className=\"inner-list__item\">\n            <a href=\"\">Apple iPhone 11 Pro Max, 256 ГБ</a>\n            <span>$130.00</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"app__item\">\n        <h2 className=\"app__item-title\">Shipping method</h2>\n        <div className=\"inner-list\">\n          <div className=\"inner-list__item\">\n            <span>FedEx</span>\n            <span>$130.00</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"app__item\">\n        <h2 className=\"app__item-title\">Payment method</h2>\n        <Payment \n          cards={cards} \n          cardsValue={cardsValue} \n          setCardsValue={setCardsValue}/>\n      </div>\n\n      <Terms \n        termsChecked={termsChecked} \n        setTermsChecked={setTermsChecked}/>\n\n      <SubmitBtn onSubmit={onSubmit}/>\n\n      {successSubmit && <span className=\"submit-status success\">Success!</span>}\n      {errorSubmit && <span className=\"submit-status error\">Error!</span>}\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}